#!/usr/bin/bash

#mkdir /tmp/app
#pushd /tmp/app

#curl -sL http://downloads.openshift-console.svc.cluster.local/amd64/linux/oc.tar | tar xf -
#curl -sL http://hyperconverged-cluster-cli-download.openshift-cnv.svc.cluster.local:8080/amd64/linux/virtctl.tar.gz | tar xfz -
export PATH=$PATH:$PWD

c() { echo "# $@" ; }
n() { echo "" ; }
x() { echo "\$ $@" ; eval "$@" ; }
red() { echo -e "\e[0;31m$@\e[0m" ; }
green() { echo -e "\e[0;32m$@\e[0m" ; }
die() { red "FATAL: $@" ; exit 1 ; }
assert() { echo "(assert:) \$ $@" ; eval $@ || { echo "(assert?) FALSE" ; die "Assertion ret 0 failed: '$@'" ; } ; green "(assert?) True" ; }

#      oc get -n openshift-cnv hyperconverged hyperconverged

run_check() {
  CHECK=$1


  local RESULTSD="${RUN_RESULTSD}/${CHECK}"
  local WD="${RESULTSD}/wd"
  local LOG_FILE="${RESULTSD}/log.txt"
  local RESULT_RAW_FILE_JSON="${RESULTSD}/result_raw.json"
  local DISPLAYNAME=${DISPLAYNAME:-$CHECK}
  export PASS=true LVL= MESSAGE= STEP=

  mkdir -p $RESULTSD $WD

  source checks.d/$CHECK

  _write_result_json() {
    cat >> $RESULT_RAW_FILE_JSON <<EOJ
{
  "check": "$CHECK",
  "step": "$STEP",
  "displayname": "$DISPLAYNAME",
  "pass": $PASS,
  "level": "$LVL",
  "message": "$MESSAGE"
}
EOJ
  }
  pass() { STEP= PASS=true MESSAGE="$@" ; _write_result_json ; }
  pass_with_warn() { STEP=$1 ; shift ; PASS=true LVL=WARN ; export MESSAGE="$@" ; _write_result_json ; }
  pass_with_info() { STEP=$1 ; shift ; PASS=true LVL=INFO ; export MESSAGE="$@" ; _write_result_json ; }
  fail_with() { STEP=$1 ; shift ; PASS=false LVL=FAIL MESSAGE="$@" ; _write_result_json ; exit 1 ; }

  (
    set -x
    pushd $WD
    run
    pass
  ) > $LOG_FILE 2>&1
  (
    set -x
    pushd $WD
    cleanup
  ) >> $LOG_FILE 2>&1
}

main() {
  export RUN_CHECKSD="${1:-$PWD/checks.d}"
  export RUN_RESULTSD="$PWD/results.d/$(date +%F-%T).d"

  mkdir $RUN_RESULTSD

  c "Tasks: $RUN_CHECKSD ($(ls -1 $RUN_CHECKSD | wc -l))"
  c "Results: $RUN_RESULTSD"
  c "Starting validation ..."

  set -m  # job control
  for REL_CHECK in $(ls -1 $RUN_CHECKSD);
  do
    c "Dispatching '$REL_CHECK' ..."
    run_check $(basename $REL_CHECK) &
  done

  c "Waiting for jobs to complete" 
  wait -f
  c "All jobs completed. Summarizing."

  cat ${RUN_RESULTSD}/*/result_raw.json \
  | jq -s . \
  | jq '{apiVersion: "validate.kubevirt.io/v1alpha1", kind: "Results", items: .}' \
  | tee ${RUN_RESULTSD}/result.json \
  | pprint
}

pprint() {
  if [[ -n "$AS_JSON" ]];
  then
    jq
  else
    jq -r '.items[] | if .pass == false or .step == "" then [if .pass == true then "PASS" else "FAIL" end, "-", .displayname, if .step != "" then ["/", .step, "-", .message] | join(" ") else "" end] else ["      ", .displayname, "/", .step, "-", .level, "-", .message ] end | join(" ")';
  fi
}

main $1
