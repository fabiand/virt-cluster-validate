#!/usr/bin/bash

#mkdir /tmp/app
#pushd /tmp/app

#curl -sL http://downloads.openshift-console.svc.cluster.local/amd64/linux/oc.tar | tar xf -
#curl -sL http://hyperconverged-cluster-cli-download.openshift-cnv.svc.cluster.local:8080/amd64/linux/virtctl.tar.gz | tar xfz -
export PATH=$PATH:$PWD

c() { echo "# $@" ; }
n() { echo "" ; }
x() { echo "\$ $@" ; eval "$@" ; }
red() { echo -e "\e[0;31m$@\e[0m" ; }
green() { echo -e "\e[0;32m$@\e[0m" ; }
die() { red "FATAL: $@" ; exit 1 ; }
assert() { echo "(assert:) \$ $@" ; eval $@ || { echo "(assert?) FALSE" ; die "Assertion ret 0 failed: '$@'" ; } ; green "(assert?) True" ; }

#      oc get -n openshift-cnv hyperconverged hyperconverged

main() {
  local PLUGIN_FILTER="${1:-*}"

  local PLUGINS=$(cat checks.d/generated-plugin-index.txt | grep -E "$PLUGIN_FILTER" | sort)
  local RESULTSD=$PWD/results.d/

  c "Starting validation ..."

  set -m  # job control
  for PLUGIN in $PLUGINS
  do
    PLUGIN_RESULTS="$RESULTSD/$(echo $PLUGIN | tr "/:.-" "____").d/"
    mkdir -p $PLUGIN_RESULTS
    c "Dispatching '$PLUGIN' ..."
    (
    set -x
    podman -r run \
        --rm \
        --volume $PLUGIN_RESULTS:/results.d:rw,z \
        --volume $HOME/.kube:/.kube:ro,z \
        --volume $(which oc):/usr/bin/oc:ro,bind,exec,z \
        --volume $(which virtctl):/usr/bin/virtctl:ro,bind,exec,z \
        $PLUGIN
    ) > $PLUGIN_RESULTS/cmdline 2>&1 &
  done

  c "Waiting for jobs to complete" 
  wait -f
  c "All jobs completed. Summarizing."

  cat ${RESULTSD}/*/result.json \
  | jq -s . \
  | jq '{apiVersion: "validate.kubevirt.io/v1alpha1", kind: "Results", items: .}' \
  | tee ${RESULTSD}/result.json \
  | pprint
}

highlight() {
	declare -A fg_color_map
	fg_color_map[black]=30
	fg_color_map[red]=31
	fg_color_map[green]=32
	fg_color_map[yellow]=33
	fg_color_map[blue]=34
	fg_color_map[magenta]=35
	fg_color_map[cyan]=36
	 
	fg_c=$(echo -e "\e[1;${fg_color_map[$1]}m")
	c_rs=$'\e[0m'
	sed -u s"/$2/$fg_c\0$c_rs/g"
}

pprint() {
  (
  if [[ -n "$AS_JSON" ]];
  then
    jq
  else
    jq -r '.items[]
           | if .pass == false or .step == "" 
             then [if .pass == true then "PASS" else "FAIL" end, "-", .displayname, if .step != "" then ["/", .step, "-", .message] | join(" ") else "" end] 
             else ["      ", .displayname, "/", .step, "-", .level, "-", .message ] end
           | join(" ")';
  fi
  ) | highlight red FAIL | highlight yellow WARN | highlight cyan INFO | highlight green PASS
}

main $@
