apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: virtualization-validation
spec:
  finally:
    - name: cleanup
      taskSpec:
        stepTemplate:
          image: quay.io/fdeutsch/virtualization-validation:latest
        steps:
          - command: [/app/cleanup]
            name: cleanup
    - name: notify
      taskSpec:
        stepTemplate:
          image: quay.io/fdeutsch/virtualization-validation:latest
        steps:
          - command: [/app/notify]
            name: notify
#  results:
#    - description: Passed?
#      name: pass
#      value: $(tasks.compute.results.pass)
  tasks:
    - name: compute
      description: Validate basic compute capabilities
      taskSpec:
        stepTemplate:
          image: quay.io/fdeutsch/virtualization-validation:latest
        steps:
          - command: [/app/compute, live-migration]
            name: live-migration
          - command: [/app/compute, high-availability]
            name: high-availability
          - command: [/app/compute, high-density]
            name: high-density
          - command: [/app/compute, high-performance]
            name: high-performance
      timeout: 2m0s

    - name: storage
      taskSpec:
        stepTemplate:
          image: quay.io/fdeutsch/virtualization-validation:latest
        steps:
          - command: [/app/storage, classes]
            name: storageclasses
          - command: [/app/storage, local]
            name: local-storage
          - command: [/app/storage, shared]
            name: shared-storage
          - command: [/app/storage, snapshot-and-clone]
            name: snapshot-and-clone
      timeout: 2m0s

    - name: network
      taskSpec:
        stepTemplate:
          image: quay.io/fdeutsch/virtualization-validation:latest
        steps:
          - command: [/app/network, basic]
            name: basics
          - command: [/app/network, nmstate]
            name: nmstate
          - command: [/app/network, multus]
            name: multus
      timeout: 2m0s


#    - name: wait-for-vmi-status
#      params:
#        - name: vmiName
#          value: $(tasks.create-vm-from-template.results.name)
#        - name: successCondition
#          value: status.phase == Succeeded
#        - name: failureCondition
#          value: 'status.phase in (Failed, Unknown)'
#      runAfter:
#        - create-vm-from-template
#      taskRef:
#        kind: ClusterTask
#        name: wait-for-vmi-status
#      timeout: 2h0m0s
#    - name: create-base-dv
#      params:
#        - name: manifest
#          value: |
#            apiVersion: cdi.kubevirt.io/v1beta1
#            kind: DataVolume
#            metadata:
#              name: $(params.baseDvName)
#              namespace: $(params.baseDvNamespace)
#              annotations:
#                cdi.kubevirt.io/storage.bind.immediate.requested: "true"
#            spec:
#              storage: {}
#              source:
#                pvc:
#                  name: $(tasks.create-vm-from-template.results.name)-rootdisk
#                  namespace: $(tasks.create-vm-from-template.results.namespace)
#        - name: waitForSuccess
#          value: 'true'
#        - name: allowReplace
#          value: 'true'
#      runAfter:
#        - wait-for-vmi-status
#      taskRef:
#        kind: ClusterTask
#        name: modify-data-object
#      timeout: 1h0m0s
#    - name: import-win-iso
#      params:
#        - name: manifest
#          value: |-
#            apiVersion: cdi.kubevirt.io/v1beta1
#            kind: DataVolume
#            metadata:
#              annotations:
#                cdi.kubevirt.io/storage.bind.immediate.requested: "true"
#              generateName: "$(params.isoDVName)-"
#            spec:
#              source:
#                http:
#                  url: "$(params.winImageDownloadURL)"
#              pvc:
#                accessModes:
#                  - ReadWriteOnce
#                resources:
#                  requests:
#                    storage: 9Gi
#        - name: waitForSuccess
#          value: 'true'
#        - name: deleteObject
#          value: 'false'
#      taskRef:
#        kind: ClusterTask
#        name: modify-data-object
#    - name: modify-windows-iso-file
#      params:
#        - name: pvcName
#          value: $(tasks.import-win-iso.results.name)
#      runAfter:
#        - import-win-iso
#      taskRef:
#        kind: ClusterTask
#        name: modify-windows-iso-file
